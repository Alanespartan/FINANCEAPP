/* eslint-disable @typescript-eslint/no-explicit-any */
import { TExpenseType } from "@common/types/expenses";
import { expenseTypeStore } from "@db";
import { ExpenseType } from "@entities";

/**
* Saves a given entity in the database expense type store. If entity does exist in the database it's updated, otherwise it's inserted.
* @param {ExpenseType} toSave Expense Type object used to overwrite existing entry or create a new one
* @returns {Promise<ExpenseType>} A promise containing the saved expense type entity instance with the id generated by the database
*/
export async function saveExpenseType(toSave: ExpenseType): Promise<ExpenseType> {
    return await expenseTypeStore.save(toSave);
}

export async function getUserExpenseTypes(userId: number) {
    return await expenseTypeStore.find({
        where: {
            user: {
                id: userId
            }
        }
    });
}

export async function getUserExpenseTypesByType(userId: number, filter: TExpenseType) {
    return await expenseTypeStore.find({
        where: {
            userId: userId,
            type: filter
        }
    });
}

export async function getExpenseTypeById(expenseTypeId: number) {
    return await expenseTypeStore.findOne({
        where: {
            id: expenseTypeId
        }
    });
}

export async function getByFilters(conditions: any) { // TODO EXPENSE TYPES create interface to define potencial non undefined properties to search for
    return await expenseTypeStore.find({ where: conditions });
}
