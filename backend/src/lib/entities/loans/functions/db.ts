/* eslint-disable @typescript-eslint/no-explicit-any */
import { loanStore } from "@db";
import { filterNonNullableAttributes } from "./util";
import { Loan } from "@entities";

export async function getById(loanId: number) {
    return await loanStore.findOne({
        where: {
            id: loanId
        }
    });
}

export async function getByBank(bankId: number) {
    return await loanStore.find({
        where: {
            bank: {
                id: bankId
            }
        }
    });
}

export async function getUserLoans(userId: number) {
    return await loanStore.find({
        where: {
            user: {
                id: userId
            }
        }
    });
}

/**
* Saves a given entity in the database loan store. If entity does exist in the database it's updated, otherwise it's inserted.
* @param {Loan} toSave Loan object used to overwrite existing entry or create a new one.
* @returns The saved loan entity instance containing the id generated by the database.
*/
export async function saveLoan(toSave: Loan) {
    return await loanStore.save(toSave);
}

/**
* Updates entity partially using a given set of attributes.
* It uses "TypeORMEntity.update()" instead of "TypeORMEntity.save()".
* It executes fast and efficient UPDATE query.
* Does not check if entity exist in the database.
*/
export async function updateLoan(loanId: number, options: any) {
    // build payload to update loan from non null/undefined options
    const payload = filterNonNullableAttributes(options);
    await loanStore.update(loanId, payload);
}
